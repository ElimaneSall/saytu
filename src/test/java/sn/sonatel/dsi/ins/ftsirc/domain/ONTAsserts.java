package sn.sonatel.dsi.ins.ftsirc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ONTAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertONTAllPropertiesEquals(ONT expected, ONT actual) {
        assertONTAutoGeneratedPropertiesEquals(expected, actual);
        assertONTAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertONTAllUpdatablePropertiesEquals(ONT expected, ONT actual) {
        assertONTUpdatableFieldsEquals(expected, actual);
        assertONTUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertONTAutoGeneratedPropertiesEquals(ONT expected, ONT actual) {
        assertThat(expected)
            .as("Verify ONT auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertONTUpdatableFieldsEquals(ONT expected, ONT actual) {
        assertThat(expected)
            .as("Verify ONT relevant properties")
            .satisfies(e -> assertThat(e.getIndex()).as("check index").isEqualTo(actual.getIndex()))
            .satisfies(e -> assertThat(e.getOntIP()).as("check ontIP").isEqualTo(actual.getOntIP()))
            .satisfies(e -> assertThat(e.getServiceId()).as("check serviceId").isEqualTo(actual.getServiceId()))
            .satisfies(e -> assertThat(e.getSlot()).as("check slot").isEqualTo(actual.getSlot()))
            .satisfies(e -> assertThat(e.getPon()).as("check pon").isEqualTo(actual.getPon()))
            .satisfies(e -> assertThat(e.getPonIndex()).as("check ponIndex").isEqualTo(actual.getPonIndex()))
            .satisfies(e -> assertThat(e.getMaxUp()).as("check maxUp").isEqualTo(actual.getMaxUp()))
            .satisfies(e -> assertThat(e.getMaxDown()).as("check maxDown").isEqualTo(actual.getMaxDown()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertONTUpdatableRelationshipsEquals(ONT expected, ONT actual) {
        assertThat(expected)
            .as("Verify ONT relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getOlt()).as("check olt").isEqualTo(actual.getOlt()));
    }
}
