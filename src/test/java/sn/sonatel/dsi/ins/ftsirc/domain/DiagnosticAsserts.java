package sn.sonatel.dsi.ins.ftsirc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DiagnosticAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticAllPropertiesEquals(Diagnostic expected, Diagnostic actual) {
        assertDiagnosticAutoGeneratedPropertiesEquals(expected, actual);
        assertDiagnosticAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticAllUpdatablePropertiesEquals(Diagnostic expected, Diagnostic actual) {
        assertDiagnosticUpdatableFieldsEquals(expected, actual);
        assertDiagnosticUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticAutoGeneratedPropertiesEquals(Diagnostic expected, Diagnostic actual) {
        assertThat(expected)
            .as("Verify Diagnostic auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticUpdatableFieldsEquals(Diagnostic expected, Diagnostic actual) {
        assertThat(expected)
            .as("Verify Diagnostic relevant properties")
            .satisfies(e -> assertThat(e.getIndex()).as("check index").isEqualTo(actual.getIndex()))
            .satisfies(e -> assertThat(e.getStatutONT()).as("check statutONT").isEqualTo(actual.getStatutONT()))
            .satisfies(e -> assertThat(e.getDebitUp()).as("check debitUp").isEqualTo(actual.getDebitUp()))
            .satisfies(e -> assertThat(e.getDebitDown()).as("check debitDown").isEqualTo(actual.getDebitDown()))
            .satisfies(e -> assertThat(e.getDateDiagnostic()).as("check dateDiagnostic").isEqualTo(actual.getDateDiagnostic()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticUpdatableRelationshipsEquals(Diagnostic expected, Diagnostic actual) {
        assertThat(expected)
            .as("Verify Diagnostic relationships")
            .satisfies(e -> assertThat(e.getTypeDiagnostic()).as("check typeDiagnostic").isEqualTo(actual.getTypeDiagnostic()))
            .satisfies(e -> assertThat(e.getSignal()).as("check signal").isEqualTo(actual.getSignal()))
            .satisfies(e -> assertThat(e.getOnt()).as("check ont").isEqualTo(actual.getOnt()))
            .satisfies(e -> assertThat(e.getAnomalies()).as("check anomalies").isEqualTo(actual.getAnomalies()));
    }
}
