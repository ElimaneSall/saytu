entity OLT {
    libelle String required,
    ip String required,
    vendeur String required,
    typeEquipment String ,
    codeEquipment String,
    adresse String ,
    emplacement String,
    typeCarte String,
    latitude String,
    longitude String,
    capacite String,
    etat String,
    createdAt LocalDate,
    updatedAt LocalDate
}

entity ONT {
    index String required,
    ontID String required,
    serviceId String required,
    slot String required,
    pon String required,
    ponIndex String required,
    maxUp String,
    maxDown String,
    createdAt LocalDate,
    updatedAt LocalDate,
    etatOlt String,
    status String,
    statusAt LocalDate,
    nbreLignesCouper Long

}

enum StatutONT {
    ACTIF,
    INACTIF
}

entity Diagnostic {
    statutONT StatutONT,
    dateDiagnostic LocalDate,
    typeDiagnostic TypeDiagnostic,
    debitUp String,
    debitDown String,
    powerONT String,
    powerOLT String
}

enum TypeDiagnostic {
    AUTOMATIQUE,
    MANUEL
}

entity Metrique {
    oltPower String required,
    ontPower String required,
    createdAt LocalDate,
}

entity Anomalie {
    libelle String required unique,
    description TextBlob,
    etat String,
    description TextBlob,
    recommandation TextBlob,
    code Integer
}

entity Signal {
    libelle String required unique,
    valueSignal Double,
    seuilMin Double required,
    seuilMax Double required

}

entity Client {
    nclient Long required,
    nom String required,
    prenom String required,
    etat String required,
    numeroFixe String required,
    contactMobileClient String required,
    isDoublons Boolean required,

}

entity Offre {
    libelle String required unique,
    debitMax String required,

}

relationship OneToOne {
    ONT{client(numeroFixe)} to Client{ont(serviceId)}
}


relationship ManyToOne {
    Client{offre} to Offre{client}
    Diagnostic{signal} to Signal{diagnostic}
    ONT{olt} to OLT{ont}
    Diagnostic{ont} to ONT{diagnostic}
    Metrique{ont} to ONT{metrique}
}


relationship ManyToMany {
    Diagnostic{anomalie} to Anomalie{diagnostic}
}

dto * with mapstruct
service * with serviceImpl
filter *
paginate * with pagination
